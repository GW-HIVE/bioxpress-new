Summary of the protocol




************************************************************************
*URLs used
************************************************************************
scriptPath = /projects/bioxpress/scripts/v-2.1/externalDb/
dataPath = /mnt/external-1/projects/bioxpress/v-2.1/downloads/
generatedDataPath = /data/projects/bioxpress/v-2.1/generated/


************************************************************************
*Step 1. Load file information into biox_datasets
************************************************************************
script: $scriptPath/load_datasets.py
version: 
location: $dataPath
protocol: This step is finished in MGPC. RNA-seq files (gene expression)
	and miRNA-seq files (miRNA expression) are downloaded 
	(assayPlatform = "gene_RNAseq" and "mir_GA.hg19.mirbase20", 
	"mir_HiSeq.hg19.mirbase20") and all TCGA cancer types are 
	included here (FPPP is not cancer type).


************************************************************************
*Step 2. Get the paired data from downloaded file (only raw counts) 
************************************************************************
script: $scriptPath/get-paired-data.py get paired data and generate the
	statistics of each cancer type.
location: $generatedDataPath/logs-step1/
QC script: $scriptPath/check-paired-data.py to check the rest of 
	the patient IDs contain both experimental and control groups.
protocol: This step is finished in MGPC. User needs to provide argument 
	of sequencing type (RNAseq or miRNAseq) to run the script.
stats:
	cancer type		#patient-RNAseq		#patient-miRNAseq
	STAD			32			41
	PAAD			4			4
	KIRC			72			67
	READ			6			0
	GBM			0			0
	HNSC			43			43
	PCPG			3			3
	BLCA			19			19
	UCS			0			0
	KIRP			32			34
	UVM			0			0
	LIHC			50			48
	CHOL			9			9
	COAD			26			0
	OV			0			0
	SKCM			1			2
	PRAD			52			52
	KICH			25			24
	UCEC			7			18
	ESCA			11			12
	LUSC			51			44
	SARC			2			0
	MESO			0			0
	ACC			0			0
	LUAD			58			39
	LGG			0			0
	CESC			3			3
	LAML			0			0
	THCA			59			59
	BRCA			113			75/14*
	TGCT			0			0
	DLBC			0			0
	THYM			2			2

* Both Hiseq (75) and Genome Analyzer (14) platforms have paired miRNAseq 
	data. Others involve only Hiseq platform.


************************************************************************
*Step 3. Generate files needed for DESeq2
************************************************************************
script: $scriptPath/input-for-DESeq2.py
location: $generatedDataPath/logs-step2/
protocol: This step is finished in MGPC. The appended files 
	($cancerType_treat and $cancerType_subject) should have the 
	same order with the header of the main file ($cancerType_DESeq2). 
	Rows with no raw counts in any patient are deleted. User needs
	to provide argument of sequencing type (RNAseq or miRNAseq) to 
	run the script.


************************************************************************
*Step 4. Run DESeq2 (cancer-wise, run for each cancer type)
************************************************************************
script: $scriptPath/DESeq2_overall.R
location: $generatedDataPath/logs-step3/
protocol: Only student server support DESeq2. Along with the results
	from DESeq2, one file of normailzed counts by DESeq2 and figures
	to show the distribution of log2FC vaules and PCA plot are all
	generated at the same time. For differetial expression analysis,
	two levels are designed: one ("cancer", "normal"); the other 
	one (patient IDs).


************************************************************************
*Step 5. Run DESeq2 (patient-wise, run for each patient)
************************************************************************
script: $scriptPath/DESeq2_per_patient.R
location: $generatedDataPath/logs-step4/
protocol: Run for each patient. The same criteria as above. 


************************************************************************
*Step 6. Merge all results of DESeq2 on each patient
************************************************************************
script: $scriptPath/merge-patient-DESeq2.py
location: $generatedDataPath/logs-step5/
protocol: The threshold for over-/under-expression is set to one for 
	absolute log2FoldChange values. It generates one file for each 
	cancer type.


************************************************************************
*Step 7. Generating patient frequencies of each over-/under-expression 
	transcript
************************************************************************
script: $scriptPath/get-patient-frequency.py
location: $generatedDataPath/logs-step6/
protocol: It generates one file for each cancer type, including patient
	numbers with over-expressed and under-expressed certain gene/miRNA
	and total number of patients.


************************************************************************
*Step 8.1. Extract all tumor expression for all cancer types
************************************************************************
script: $scriptPath/get-tumor-expression.py
location: $generatedDataPath/logs-step7/
protocol: It generates one file for each cancer type. This step is used
	for generating boxplot figures from raw expression level
	provided by TCGA. The statistics for each cancer 
	type is also generated in the same time.
stats: See the stats.txt in the same location.


************************************************************************
*Step 8.2. Download all tumor expression for all cancer types (ICGC)
************************************************************************
path: https://dcc.icgc.org/search
script: $scriptPath/get-tumor-expression-icgc.py
location: $icgcDataPath/
	  $generatedDataPath/logs-step7/
protocol: Select all projects that are NOT from US (most of them are from
	TCGA, only four of them, WT-US, AML-US, ALL-US, and NBL-US are
	from TARGET, but they only contain BAM files for RNAseq and miRNAseq
	data. So for now we don't consider them). Select data type as 
	"RNA-seq" and "miRNA-seq", and then donwload donors data.

	For extraction by python script, it separates different cancer 
	types, and within each cancer types, normalized read count of each
	gene/miRNA from each patient is extracted.
 
stats:
	cancer type	#patient-miRNAseq(Hiseq)
	OV		93
	MALY		52

	cancer type 	#patient-RNAseq
	MALY		105
	CLLE		304
	RECA		91
	PAEN		32
	LIRI		232
	PACA		137
	BRCA		50
	OV		93


************************************************************************
*Step 9. Calculate percentiles of tumor expression for boxplot (NOT INCLUDE ICGC)
************************************************************************
script: $scriptPath/DESeq2_tumor_expression.R
	$scriptPath/calculate-percentiles-tumor.py
location: $generatedDataPath/logs-step8/
protocol: This step is first used to normalize raw counts of tumor-only 
	expression by Rscript, and then to calculate the percentiles of 
	tumor only expression data for graphing boxplot. Also, calculate 
	the patient frequencies (how many patients express this transcript).


************************************************************************
*Step 10. Mapping process for gene/miRNA information
************************************************************************
script: $scriptPath/add-annotation-RNAseq-step[1][2].py
	$scriptPath/add-annotation-miRNAseq-step[1][2].py
	$scriptPath/add-annotation-manual-record.py
location: $generatedDataPath/logs-step9/
	  reference location:
		$generatedDataPath/reference
protocol: Ensembl and RefSeq IDs are from (RNAseq):
		wget ftp://ftp.ncbi.nlm.nih.gov/gene/DATA/gene2ensembl.gz

	  UniProt IDs are from (RNAseq):
		wget ftp://ftp.uniprot.org/pub/databases/uniprot/ \
		current_release/knowledgebase/idmapping/by_organism/ \
		HUMAN_9606_idmapping.dat.gz

	  miRBase IDs are from (miRNAseq):
		wget ftp://mirbase.org/pub/mirbase/CURRENT/genomes/hsa.gff3
	
	  HGNC miRNA symbols are from (miRNAseq):
		wget ftp://ftp.ebi.ac.uk/pub/databases/genenames/new/tsv/ \
		locus_types/RNA_micro.txt

	For RNAseq, only UniProtKB/SWISS-Prot IDs are taken into 
	consideration here. The list of the reviewed human UniProt IDs 
	is extracted directly from uniprot website by searching queries.
	Unreviewed ones are using "-" in UniProt and geneName columns.
	#ATTENTION# In UniPortKB, several entries have the same gene names.
		The trade off here is:
			a) compare gene name provided by RNAseq data and
			UniProtKB. If they match, keep the corresponding UniPort ID.
			b) compare RNAseq gene names to ENTRY names of UniProt.
			If they match, keep the corresponding UniProt ID.
			c) If none of the above match, sort UniProt IDs, and 
			take the first one as UniPort IDs.

	For miRNAseq, miRNA IDs from HGNC, miRBase, and Ensembl are 
	mapped here (Ensembl IDs are included in the file downloaded
	from HGNC). 


************************************************************************
*Step 11. Merge all information to one table for cancer-wise differential
	expression analysis results
************************************************************************
script: $scriptPath/merge-DESeq2-cancer-wise.py
location: $generatedDataPath/logs-step10/
protocol: This step is for merging all gene/miRNA information from 
	various datasets, as well as the results of cancer-wise differential
	expression analysis.


************************************************************************
*Step 12. Mapping process for cancer type information (DOID) and add
	patient frequencies, as well as manually curated records
************************************************************************
script: $scriptPath/add-cancer-type.py
location: $generatedDataPath/logs-step11/
protocol: The input file reference.txt contains all cancer types involved
	in DESeq2 analysis, and each of them is mapped to one or two 
	DOIDs. To generate the final table of BioXpress, patient
	frequencies from step 6 and step 7 are added here. Also added 
	manually curated records in the result file.

************************************************************************
*Step 13. Mapping process for transcript names in tumor-only expression
	datasets
************************************************************************
script: $scriptPath/map-transcript-name-boxplot.py
location: $generatedDataPath/logs-step12/
protocol: For genes, gene names are mapped to UniProtKB/SWISS-Prot IDs,
	while for miRNAs, miRNA names are mapped to miRNA alias symbols.

************************************************************************
*Step 14. Generate files for loading into MySQL database
************************************************************************
script: $scriptPath/get-file-for-loading.py
location: $generatedDataPath/logs-step13/
protocol: File generated in this step include four different files.
	log2FC, pValue and adjPValue are adjusted to scientific numbers
	and kept two digits. Bonferroni's approach is also involved in
	this step to add column "significance". For cancer types, this step
	also includes those cancer types that only exist in tumor-only
	expression data.
	
	For sample and doid files, separate files from RNAseq and miRNAseq
	were merged and unique into one file $name_final.txt for loading.
	These files need one more step (Step 15) before loading to database.

************************************************************************
*Step 15. Mapping to Uberon IDs
************************************************************************
script: $scriptPath/get-tissue-file.py
location: $generatedDataPath/logs-step14/
protocol: The reference for this step is based on what Ting-Chia created
	for the older version of BioXpress (v2.0). May need to be changed
	in the future. Additionally, file generated in this step contains
	cancer types that are not used in either DE or boxplot tables.

************************************************************************
*Step 16. Loading process
************************************************************************
script: $scriptPath/load_feature.py
		   /load_xref.py
		   /load_tissue.py
		   /load_doid.py
		   /load_sample.py
		   /load_de.py
		   /load_boxplot.py
		   /add-doid-in-sample-table.py
location: $generatedDataPath/logs-step13/
protocol: Files should be loaded in an order due to the foreign keys
	among them. Check them before loading.
	  First load biox_sample table without adding doid table, and 
	then use add-doid-in-sample-table.py to update the table, and 
	delete those not in either DE or boxplot tables (need to check
	the database to make sure before deleting any entry).


************************************************************************
*Additional information
************************************************************************
The DO_cancer_slim.json can be downloaded from Disease Ontology website
showing below:

wget https://raw.githubusercontent.com/DiseaseOntology/ \
	HumanDiseaseOntology/master/src/ontology/subsets/ \
	DO_cancer_slim.json

This file is NOT loaded into database due to the lack of parental IDs.
